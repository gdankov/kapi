/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloudfoundry-community/kapi/pkg/apis/kapi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StagingLister helps list Stagings.
type StagingLister interface {
	// List lists all Stagings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Staging, err error)
	// Stagings returns an object that can list and get Stagings.
	Stagings(namespace string) StagingNamespaceLister
	StagingListerExpansion
}

// stagingLister implements the StagingLister interface.
type stagingLister struct {
	indexer cache.Indexer
}

// NewStagingLister returns a new StagingLister.
func NewStagingLister(indexer cache.Indexer) StagingLister {
	return &stagingLister{indexer: indexer}
}

// List lists all Stagings in the indexer.
func (s *stagingLister) List(selector labels.Selector) (ret []*v1alpha1.Staging, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Staging))
	})
	return ret, err
}

// Stagings returns an object that can list and get Stagings.
func (s *stagingLister) Stagings(namespace string) StagingNamespaceLister {
	return stagingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StagingNamespaceLister helps list and get Stagings.
type StagingNamespaceLister interface {
	// List lists all Stagings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Staging, err error)
	// Get retrieves the Staging from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Staging, error)
	StagingNamespaceListerExpansion
}

// stagingNamespaceLister implements the StagingNamespaceLister
// interface.
type stagingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Stagings in the indexer for a given namespace.
func (s stagingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Staging, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Staging))
	})
	return ret, err
}

// Get retrieves the Staging from the indexer for a given namespace and name.
func (s stagingNamespaceLister) Get(name string) (*v1alpha1.Staging, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("staging"), name)
	}
	return obj.(*v1alpha1.Staging), nil
}
