/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cloudfoundry-community/kapi/pkg/apis/kapi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LRPLister helps list LRPs.
type LRPLister interface {
	// List lists all LRPs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LRP, err error)
	// LRPs returns an object that can list and get LRPs.
	LRPs(namespace string) LRPNamespaceLister
	LRPListerExpansion
}

// lRPLister implements the LRPLister interface.
type lRPLister struct {
	indexer cache.Indexer
}

// NewLRPLister returns a new LRPLister.
func NewLRPLister(indexer cache.Indexer) LRPLister {
	return &lRPLister{indexer: indexer}
}

// List lists all LRPs in the indexer.
func (s *lRPLister) List(selector labels.Selector) (ret []*v1alpha1.LRP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LRP))
	})
	return ret, err
}

// LRPs returns an object that can list and get LRPs.
func (s *lRPLister) LRPs(namespace string) LRPNamespaceLister {
	return lRPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LRPNamespaceLister helps list and get LRPs.
type LRPNamespaceLister interface {
	// List lists all LRPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LRP, err error)
	// Get retrieves the LRP from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LRP, error)
	LRPNamespaceListerExpansion
}

// lRPNamespaceLister implements the LRPNamespaceLister
// interface.
type lRPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LRPs in the indexer for a given namespace.
func (s lRPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LRP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LRP))
	})
	return ret, err
}

// Get retrieves the LRP from the indexer for a given namespace and name.
func (s lRPNamespaceLister) Get(name string) (*v1alpha1.LRP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lrp"), name)
	}
	return obj.(*v1alpha1.LRP), nil
}
